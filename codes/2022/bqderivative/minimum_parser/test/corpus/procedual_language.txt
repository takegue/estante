================================================================================
PROCEDURAL LANGUAGE: multi statement
================================================================================

select 1;
select 1;

--------------------------------------------------------------------------------

(source_file
  (query_statement
    (query_expr
      (select
        (select_list
          (select_expression
            (number))))))
  (query_statement
    (query_expr
      (select
        (select_list
          (select_expression
            (number)))))))

================================================================================
PROCEDURAL LANGUAGE: DECLARE statement
================================================================================

DECLARE x INT64;
DECLARE d DATE DEFAULT CURRENT_DATE();
DECLARE x, y, z INT64 DEFAULT 0;
DECLARE x, y, z ARRAY<STRING>;
DECLARE item DEFAULT (SELECT item FROM schema1.products LIMIT 1);

--------------------------------------------------------------------------------

(source_file
  (declare_statement
    (identifier)
    (variable_type))
  (declare_statement
    (identifier)
    (variable_type)
    (default_clause
      (function_call
        (identifier))))
  (declare_statement
    (identifier)
    (identifier)
    (identifier)
    (variable_type)
    (default_clause
      (number)))
  (declare_statement
    (identifier)
    (identifier)
    (identifier)
    (variable_type))
  (declare_statement
    (identifier)
    (variable_type))
  (query_statement
    (query_expr
      (query_expr
        (select
          (select_list
            (select_expression
              (identifier)))
          (from_clause
            (from_item
              (identifier))))
        (limit_clause)))))

================================================================================
PROCEDURAL LANGUAGE: SET statement
================================================================================

SET x = 5;
SET (a, b, c) = (1 + 3, 'foo', false);

--------------------------------------------------------------------------------

(source_file
  (set_statement
    (identifier)
    (number))
  (set_statement
    (identifier)
    (identifier)
    (identifier)
    (binary_expression
      (number)
      (number))
    (string)
    (FALSE)))

================================================================================
PROCEDURAL LANGUAGE: EXECUTE IMMEDIATE statement
================================================================================

-- y = 1 * (3 + 2) = 5
EXECUTE IMMEDIATE "SELECT ? * (? + 2)" INTO y USING 1, 3;

-- y = 1 * (3 + 2) = 5
EXECUTE IMMEDIATE "SELECT @a * (@b + 2)" INTO y USING 1 as a, 3 as b;

EXECUTE IMMEDIATE (select "SELECT @a * (@b + 2)")

--------------------------------------------------------------------------------

(source_file
  (comment)
  (execute_immadiate_statement
    (string)
    (into_clause
      (identifier))
    (using_clause
      (using_expression
        (number))
      (using_expression
        (number))))
  (comment)
  (execute_immadiate_statement
    (string)
    (into_clause
      (identifier))
    (using_clause
      (using_expression
        (number)
        (as_alias
          (identifier)))
      (using_expression
        (number)
        (as_alias
          (identifier)))))
  (execute_immadiate_statement
    (select_subexpression
      (query_expr
        (select
          (select_list
            (select_expression
              (string))))))))

================================================================================
PROCEDURAL LANGUAGE: BEGIN...END statement
================================================================================

DECLARE x INT64 DEFAULT 10;
BEGIN
  DECLARE y INT64;
  SET y = x;
  SELECT y;
END;
SELECT x;

--------------------------------------------------------------------------------

(source_file
  (declare_statement
    (identifier)
    (variable_type)
    (default_clause
      (number)))
  (begin_end_statement
    (declare_statement
      (identifier)
      (variable_type))
    (set_statement
      (identifier)
      (identifier))
    (query_statement
      (query_expr
        (select
          (select_list
            (select_expression
              (identifier)))))))
  (query_statement
    (query_expr
      (select
        (select_list
          (select_expression
            (identifier)))))))

================================================================================
PROCEDURAL LANGUAGE: BEGIN...END statement
================================================================================

CREATE OR REPLACE PROCEDURE schema1.proc1() BEGIN
  SELECT 1/0;
END;

CREATE OR REPLACE PROCEDURE schema1.proc2() BEGIN
  CALL schema1.proc1();
END;

BEGIN
  CALL schema1.proc2();
EXCEPTION WHEN ERROR THEN
  SELECT
    @@error.message,
    @@error.stack_trace,
    @@error.statement_text,
    @@error.formatted_stack_trace;
END;

BEGIN
  CALL schema2.proc2();
EXCEPTION WHEN ERROR THEN
END;


--------------------------------------------------------------------------------

(source_file
  (create_procedure_statement
    (keyword_replace)
    (identifier)
    (procedure_parameters)
    (procedure_body
      (query_statement
        (query_expr
          (select
            (select_list
              (select_expression
                (binary_expression
                  (number)
                  (number)))))))))
  (create_procedure_statement
    (keyword_replace)
    (identifier)
    (procedure_parameters)
    (procedure_body
      (call_statement
        (identifier))))
  (begin_exception_end_statement
    (call_statement
      (identifier))
    (query_statement
      (query_expr
        (select
          (select_list
            (select_expression
              (system_variable))
            (select_expression
              (system_variable))
            (select_expression
              (system_variable))
            (select_expression
              (system_variable)))))))
  (begin_exception_end_statement
    (call_statement
      (identifier))))

================================================================================
PROCEDURAL LANGUAGE: CALL statement
================================================================================

DECLARE retCode INT64;
-- Procedure parameters: (IN account_id STRING, OUT retCode INT64)
CALL mySchema.UpdateSomeTables('someAccountId', retCode);
SELECT retCode;

--------------------------------------------------------------------------------

(source_file
  (declare_statement
    (identifier)
    (variable_type))
  (comment)
  (call_statement
    (identifier)
    (string)
    (identifier))
  (query_statement
    (query_expr
      (select
        (select_list
          (select_expression
            (identifier)))))))

================================================================================
PROCEDURAL LANGUAGE: IF statement
================================================================================

DECLARE target_product_id INT64 DEFAULT 103;
IF EXISTS(SELECT 1 FROM schema.products
           WHERE product_id = target_product_id) THEN
  SELECT CONCAT('found product ', CAST(target_product_id AS STRING));
  ELSEIF EXISTS(SELECT 1 FROM schema.more_products
           WHERE product_id = target_product_id) THEN
  SELECT CONCAT('found product from more_products table',
  CAST(target_product_id AS STRING));
ELSE
  SELECT CONCAT('did not find product ', CAST(target_product_id AS STRING));
END IF;

--------------------------------------------------------------------------------

(source_file
  (declare_statement
    (identifier)
    (variable_type)
    (default_clause
      (number)))
  (if_statement
    (unary_expression
      (select_subexpression
        (query_expr
          (select
            (select_list
              (select_expression
                (number)))
            (from_clause
              (from_item
                (identifier)))
            (where_clause
              (binary_expression
                (identifier)
                (identifier)))))))
    (query_statement
      (query_expr
        (select
          (select_list
            (select_expression
              (function_call
                (identifier)
                (string)
                (cast_expression
                  (identifier)
                  (type_identifier))))))))
    (elseif_statement
      (unary_expression
        (select_subexpression
          (query_expr
            (select
              (select_list
                (select_expression
                  (number)))
              (from_clause
                (from_item
                  (identifier)))
              (where_clause
                (binary_expression
                  (identifier)
                  (identifier))))))))
    (elseif_statement
      (query_statement
        (query_expr
          (select
            (select_list
              (select_expression
                (function_call
                  (identifier)
                  (string)
                  (cast_expression
                    (identifier)
                    (type_identifier)))))))))
    (else_statement
      (query_statement
        (query_expr
          (select
            (select_list
              (select_expression
                (function_call
                  (identifier)
                  (string)
                  (cast_expression
                    (identifier)
                    (type_identifier)))))))))))

================================================================================
PROCEDURAL LANGUAGE: LOOP statement
================================================================================

DECLARE x INT64 DEFAULT 0;
LOOP
  SET x = x + 1;
  IF x >= 10 THEN
    LEAVE;
  END IF;
END LOOP;
SELECT x;


--------------------------------------------------------------------------------

(source_file
  (declare_statement
    (identifier)
    (variable_type)
    (default_clause
      (number)))
  (loop_statement
    (set_statement
      (identifier)
      (binary_expression
        (identifier)
        (number)))
    (if_statement
      (binary_expression
        (identifier)
        (number))
      (leave_statement)))
  (query_statement
    (query_expr
      (select
        (select_list
          (select_expression
            (identifier)))))))

================================================================================
PROCEDURAL LANGUAGE: REPEAT statement
================================================================================

REPEAT
  SET x = x + 1;
  SELECT x;
  UNTIL x >= 3
END REPEAT;

--------------------------------------------------------------------------------

(source_file
  (repeat_statement
    (set_statement
      (identifier)
      (binary_expression
        (identifier)
        (number)))
    (query_statement
      (query_expr
        (select
          (select_list
            (select_expression
              (identifier))))))
    (until_clause
      (binary_expression
        (identifier)
        (number)))))

================================================================================
PROCEDURAL LANGUAGE: WHILE statement
================================================================================

WHILE x >= 3 DO
  SET x = x + 1
END WHILE;

--------------------------------------------------------------------------------

(source_file
  (while_statement
    (binary_expression
      (identifier)
      (number))
    (set_statement
      (identifier)
      (binary_expression
        (identifier)
        (number)))))

================================================================================
PROCEDURAL LANGUAGE: FOR-IN statement
================================================================================

FOR record IN
  (SELECT word, word_count
   FROM `bigquery-public-data.samples.shakespeare`
   LIMIT 5)
DO
  SELECT record.word, record.word_count;
END FOR;

--------------------------------------------------------------------------------

(source_file
  (for_in_statement
    (identifier)
    (query_statement
      (query_expr
        (select
          (select_list
            (select_expression
              (identifier))
            (select_expression
              (identifier)))
          (from_clause
            (from_item
              (identifier))))
        (limit_clause)))
    (query_statement
      (query_expr
        (select
          (select_list
            (select_expression
              (identifier))
            (select_expression
              (identifier))))))))

================================================================================
PROCEDURAL LANGUAGE: ASSERT statement
================================================================================

ASSERT (
  (select 1) > 5
) AS 'Table must contain more than 5 rows.';

ASSERT
  EXISTS(
    SELECT X
    FROM UNNEST([7877, 7879, 7883, 7901, 7907]) AS X
    WHERE X = 7919
  )
AS 'Column X must contain the value 7919';

--------------------------------------------------------------------------------

(source_file
  (assert_statement
    (binary_expression
      (select_subexpression
        (query_expr
          (select
            (select_list
              (select_expression
                (number))))))
      (number))
    (string))
  (assert_statement
    (unary_expression
      (select_subexpression
        (query_expr
          (select
            (select_list
              (select_expression
                (identifier)))
            (from_clause
              (from_item
                (unnest_clause
                  (unnest_operator
                    (array
                      (number)
                      (number)
                      (number)
                      (number)
                      (number)))
                  (as_alias
                    (identifier)))))
            (where_clause
              (binary_expression
                (identifier)
                (number)))))))
    (string)))
