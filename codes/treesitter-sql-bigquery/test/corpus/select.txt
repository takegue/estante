================================================================================
SELECT statement with joins
================================================================================

SELECT a, t.a, t.b
FROM table1 AS t
JOIN t1 ON (t.a = t1.a)
INNER JOIN t2 ON (t.a = t2.a)
FULL OUTER JOIN t2 ON t.a = t2.a
FULL JOIN t3 ON t.a = t3.a
RIGHT JOIN t4 ON t.a = t4.a
RIGHT OUTER JOIN t5 ON t.a = t5.a
LEFT JOIN t6 ON t.a = t6.a
LEFT OUTER JOIN t7 ON t.a = t7.a;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (identifier)
        (identifier)
        (identifier)))
    (from_clause
      (alias
        (identifier)
        (identifier)))
    (join_clause
      (identifier)
      (comparison_operator
        (identifier)
        (identifier)))
    (join_clause
      (join_type)
      (identifier)
      (comparison_operator
        (identifier)
        (identifier)))
    (join_clause
      (join_type)
      (identifier)
      (comparison_operator
        (identifier)
        (identifier)))
    (join_clause
      (join_type)
      (identifier)
      (comparison_operator
        (identifier)
        (identifier)))
    (join_clause
      (join_type)
      (identifier)
      (comparison_operator
        (identifier)
        (identifier)))
    (join_clause
      (join_type)
      (identifier)
      (comparison_operator
        (identifier)
        (identifier)))
    (join_clause
      (join_type)
      (identifier)
      (comparison_operator
        (identifier)
        (identifier)))
    (join_clause
      (join_type)
      (identifier)
      (comparison_operator
        (identifier)
        (identifier)))))

================================================================================
SELECT element from array
================================================================================

SELECT a[0];

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (array_element_access
          (identifier)
          (number))))))

================================================================================
SELECT with aliases
================================================================================

SELECT a as b, c d, e
FROM table1 AS t, table2 t2, table3

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (alias
          (identifier)
          (identifier))
        (alias
          (identifier)
          (identifier))
        (identifier)))
    (from_clause
      (alias
        (identifier)
        (identifier))
      (alias
        (identifier)
        (identifier))
      (identifier))))

================================================================================
SELECT with CTE
================================================================================

with cte1 as (
  select 1 as a
)
, cte2 as (
  select * from cte1
)

select * from cte2

--------------------------------------------------------------------------------


(source_file
  (select_statement
    (cte_clause
      (identifier)
      (select_clause_body
        (select_subexpression
          (select_statement
            (select_clause
              (select_clause_body
                (alias
                  (number)
                  (identifier)))))))
      (identifier)
      (select_clause_body
        (select_subexpression
          (select_statement
            (select_clause
              (select_clause_body
                (asterisk_expression)))
            (from_clause
              (identifier))))))
    (select_clause
      (select_clause_body
        (asterisk_expression)))
    (from_clause
      (identifier))))

================================================================================
SELECT statement
================================================================================

SELECT;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause)))

================================================================================
SELECT statement with distinct expression
================================================================================

SELECT 1 IS DISTINCT FROM NULL;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (is_expression
          (number)
          (distinct_from
            (NULL)))))))

================================================================================
SELECT statement FROM clause
================================================================================

SELECT a, b FROM table1;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (identifier)
        (identifier)))
    (from_clause
      (identifier))))

================================================================================
SELECT statement with SELECT subexpression
================================================================================

SELECT (SELECT 1) AS a

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (alias
          (select_subexpression
            (select_statement
              (select_clause
                (select_clause_body
                  (number)))))
          (identifier))))))

================================================================================
SELECT statement with aliases
================================================================================

SELECT a, b AS c FROM table1 AS t;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (identifier)
        (alias
          (identifier)
          (identifier))))
    (from_clause
      (alias
        (identifier)
        (identifier)))))

================================================================================
SELECT statement with group by
================================================================================

SELECT a, b
FROM table1
GROUP BY lower(a), b;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (identifier)
        (identifier)))
    (from_clause
      (identifier))
    (group_by_clause
      (group_by_clause_body
        (function_call
          (identifier)
          (identifier))
        (identifier)))))

================================================================================
SELECT statement with order by
================================================================================

SELECT a, b
FROM table1
ORDER BY lower(a), b;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (identifier)
        (identifier)))
    (from_clause
      (identifier))
    (order_by_clause
      (order_by_clause_body
        (function_call
          (identifier)
          (identifier))
        (identifier)))))

================================================================================
SELECT statement FROM multiple tables
================================================================================

SELECT a, b FROM table1, table2;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (identifier)
        (identifier)))
    (from_clause
      (identifier)
      (identifier))))

================================================================================
SELECT statement with numbers
================================================================================

SELECT 1, 2;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (number)
        (number)))))

================================================================================
SELECT statement with expression
================================================================================

SELECT 1 + 2;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (binary_expression
          (number)
          (number))))))

================================================================================
SELECT statement with empty string
================================================================================

SELECT '';

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (string)))))

================================================================================
SELECT statement with columns
================================================================================

SELECT a, b;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (identifier)
        (identifier)))))

================================================================================
SELECT statement with comparison expression
================================================================================

SELECT 1 < 2;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (comparison_operator
          (number)
          (number))))))

================================================================================
SELECT statement with is expression
================================================================================

SELECT a IS TRUE, b IS NOT NULL, c IS FALSE;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (is_expression
          (identifier)
          (TRUE))
        (is_expression
          (identifier)
          (NULL))
        (is_expression
          (identifier)
          (FALSE))))))

================================================================================
SELECT field
================================================================================

SELECT foo.bar FROM a;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (identifier)))
    (from_clause
      (identifier))))

================================================================================
SELECT statement with comparison expression and is expression
================================================================================

SELECT 1 < 2 IS TRUE;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (is_expression
          (comparison_operator
            (number)
            (number))
          (TRUE))))))

================================================================================
SELECT expression with function
================================================================================

SELECT foo(bar, baz) < 10;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (comparison_operator
          (function_call
            (identifier)
            (identifier)
            (identifier))
          (number))))))

================================================================================
SELECT expression with function without args
================================================================================

SELECT foo();

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (function_call
          (identifier))))))

================================================================================
SELECT comparison expression boolean
================================================================================

SELECT TRUE AND foo(1) OR FALSE AND NOT a = b.c;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (boolean_expression
          (boolean_expression
            (TRUE)
            (function_call
              (identifier)
              (number)))
          (boolean_expression
            (FALSE)
            (boolean_expression
              (comparison_operator
                (identifier)
                (identifier)
                ))))))))

================================================================================
SELECT parenthesized expression
================================================================================

SELECT (TRUE);

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (TRUE)))))

================================================================================
SELECT parenthesized expression 2
================================================================================

SELECT TRUE AND (foo(1) OR FALSE);

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (boolean_expression
          (TRUE)
          (boolean_expression
            (function_call
              (identifier)
              (number))
            (FALSE)))))))

================================================================================
SELECT string
================================================================================

SELECT 'aaaa'

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (string)))))

================================================================================
SELECT in clause
================================================================================

SELECT 1 IN (1, 2);

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (in_expression
          (number)
          (tuple
            (number)
            (number)))))))


==================
Can parse subquery
==================

SELECT id
FROM foo
WHERE id < (
  SELECT id
  FROM bar
  LIMIT 1 OFFSET 0
);

---

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (identifier)))
    (from_clause
      (identifier))
    (where_clause
      (comparison_operator
        (identifier)
        (select_subexpression
          (select_statement
            (select_clause
              (select_clause_body
                (identifier)))
            (from_clause
              (identifier))
            (limit_clause))
            )))))

================================================================================
SELECT asterisk expressions
================================================================================

SELECT * FROM Customers;
SELECT a.* FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT COUNT(a.*) FROM Customers;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (asterisk_expression)))
    (from_clause
      (identifier)))
  (select_statement
    (select_clause
      (select_clause_body
        (asterisk_expression)))
    (from_clause
      (identifier)))
  (select_statement
    (select_clause
      (select_clause_body
        (function_call
          (identifier)
          (asterisk_expression))))
    (from_clause
      (identifier)))
  (select_statement
    (select_clause
      (select_clause_body
        (function_call
          (identifier)
          (asterisk_expression))))
    (from_clause
      (identifier))))

 
================================================================================
ALL SYNTAX INCLUDED SQL EXAMPLE
================================================================================

with 
  cross_join_cte as (
  select
    *
  from
    `table1` as a
    , `table2` as b
)
, cte1 as (
  select 
    1 as literal
    , hoge as a
  from unnest(generated_array(1, 10)) as a
  left join unnest([struct(
    a as hoge
  )]) fuga with offset ix
)
, cte2 as (
  select all as struct
    1 as literal
    , hoge as a
  from unnest(generated_array(1, 10)) as a
)
, cte3 as (
  select distinct  as value
    1 as literal
    , hoge as a
  from unnest(generated_array(1, 10)) as a
)
, cte_unioned as (
  select * from cte2
  union all select * from cte3
  inteersect distinct select * from cte3
  except distinct select * from cte3
)

SELECT id
FROM foo
WHERE id < (
  SELECT id
  FROM bar
  LIMIT 1 OFFSET 0
);

---

    (source_file
      (select_statement
        (cte_clause
          (identifier)
          (select_clause_body
            (select_subexpression
              (select_statement
                (select_clause
                  (select_clause_body
                    (asterisk_expression)))
                (from_clause
                  (alias
                    (identifier)
                    (identifier))
                  (alias
                    (identifier)
                    (identifier))))))
          (identifier)
          (select_clause_body
            (select_subexpression
              (select_statement
                (select_clause
                  (select_clause_body
                    (alias
                      (number)
                      (identifier))
                    (alias
                      (identifier)
                      (identifier))))
                (from_clause
                  (alias
                    (function_call
                      (identifier)
                      (function_call
                        (identifier)
                        (number)
                        (number)))
                    (identifier))))
              (ERROR
                (join_type)
                (identifier))))
          (identifier)
          (select_clause_body
            (select_subexpression
              (select_statement
                (select_clause
                  (select_clause_body
                    (alias
                      (identifier)
                      (identifier))
                    (ERROR)
                    (alias
                      (identifier)
                      (identifier))))
                (from_clause
                  (alias
                    (function_call
                      (identifier)
                      (function_call
                        (identifier)
                        (number)
                        (number)))
                    (identifier))))))
          (identifier)
          (select_clause_body
            (select_subexpression
              (select_statement
                (select_clause
                  (select_clause_body
                    (alias
                      (identifier)
                      (identifier))
                    (ERROR)
                    (alias
                      (identifier)
                      (identifier))))
                (from_clause
                  (alias
                    (function_call
                      (identifier)
                      (function_call
                        (identifier)
                        (number)
                        (number)))
                    (identifier))))))
          (identifier)
          (select_clause_body
            (alias
              (select_subexpression
                (select_statement
                  (select_clause
                    (select_clause_body
                      (asterisk_expression)))
                  (from_clause
                    (alias
                      (identifier)
                      (identifier))))
                (MISSING "))
              (identifier))))
        (select_clause
          (select_clause_body
            (asterisk_expression)))
        (from_clause
          (alias
            (identifier)
            (identifier))))
      (ERROR)
      (select_statement
        (select_clause
          (select_clause_body
            (asterisk_expression)))
        (from_clause
          (alias
            (identifier)
            (identifier))))
      (ERROR)
      (select_statement
        (select_clause
          (select_clause_body
            (asterisk_expression)))
        (from_clause
          (identifier)))
      (ERROR)
      (select_statement
        (select_clause
          (select_clause_body
            (identifier)))
        (from_clause
          (identifier))
        (where_clause
          (comparison_operator
            (identifier)
            (select_subexpression
              (select_statement
                (select_clause
                  (select_clause_body
                    (identifier)))
                (from_clause
                  (identifier))
                (limit_clause)))))))


================================================================================
UNNEST
================================================================================

select * from unnest([1, 2, 3]);
select * from unnest([]) as hoge with offset;
select * from unnest(field_path) as hoge with offset;

--------------------------------------------------------------------------------

(source_file
  (select_statement
    (select_clause
      (select_clause_body
        (asterisk_expression)))
    (from_clause
      (unnest_clause
        (unnest_operator
          (array
            (number)
            (number)
            (number))))))
 (select_statement
  (select_clause
   (select_clause_body
    (asterisk_expression)))
  (from_clause
   (unnest_clause
      (unnest_operator (array))
      (identifier)
      (unnest_withoffset))))
 (select_statement
  (select_clause
   (select_clause_body
    (asterisk_expression)))
  (from_clause
   (unnest_clause
    (unnest_operator)
    (identifier)
    (unnest_withoffset))
   ))
 )
