
================================================================================
OPERATORS: Unary Operators
================================================================================

select 
    +1,
    -1,
    ~1,
    NOT TRUE,
    null IS NOT TRUE,
    false IS FALSE,
    hoge IS NULL
;

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select (select_list
     (number)
     (number)
     (unary_expression
      (number))
     (unary_expression
      (TRUE))
     (unary_expression
      (NULL)
      (TRUE))
     (unary_expression
      (FALSE)
      (FALSE))
     (unary_expression
      (identifier)
      (NULL)))))))


================================================================================
OPERATORS: Binary Operators
================================================================================

select 
    1 - 2 * 3 / 10,
    "string1" || hoge2,
    (2 << 4) >> 2,
    TRUE AND NOT (null is true)
    ;

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select 
    (select_list
     (binary_expression
      (number)
      (binary_expression
       (binary_expression
        (number)
        (number))
       (number)))
     (binary_expression
      (string)
      (identifier))
     (binary_expression
      (binary_expression
       (number)
       (number))
      (number))
     (binary_expression
      (TRUE)
      (unary_expression
       (unary_expression
        (NULL)
        (TRUE)))))))))

================================================================================
OPERATORS: EXISTS operator
================================================================================


SELECT EXISTS ( SELECT value FROM Words WHERE direction = 'south' ) as result;

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select
    (select_list
     (alias
      (unary_expression
       (select_subexpression
        (query_statement
         (query_expr
          (select
           (select_list
            (identifier))
           (from_clause
            (from_item
             (identifier)))
           (where_clause
            (binary_expression
             (identifier)
             (string))))))))
      (identifier)))))))

================================================================================
OPERATORS: LIKE operator
================================================================================

SELECT x LIKE "hoge";

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select 
    (select_list
     (binary_expression
      (identifier)
      (string)))))))


================================================================================
OPERATORS: IN operator
================================================================================

SELECT 1 IN (1, 2);
SELECT 1 IN UNNEST([1, 2]);

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select (select_list
     (binary_expression
      (number)
      (struct
       (number)
       (number)))))))
 (query_statement
  (query_expr
   (select (select_list
     (binary_expression
      (number)
      (unnest_clause
       (unnest_operator
        (array
         (number)
         (number))))))))))

================================================================================
OPERATORS: statement with a comparator
================================================================================

SELECT 1 < 2;

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select (select_list
            (binary_expression
             (number)
             (number)))))))

================================================================================
OPERATORS:SELECT statement with is expression
================================================================================

SELECT a IS TRUE, b IS NOT NULL, c IS FALSE;

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select 
    (select_list
     (unary_expression
      (identifier)
      (TRUE))
     (unary_expression
      (identifier)
      (NULL))
     (unary_expression
      (identifier)
      (FALSE)))))))

================================================================================
OPERATORS: field
================================================================================

SELECT foo.bar;

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select 
    (select_list
     (identifier))))))

================================================================================
OPERATORS: statement with comparison expression and is expression
================================================================================

SELECT 1 < 2 IS TRUE;

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select
    (select_list
     (unary_expression
      (binary_expression
       (number)
       (number))
      (TRUE)))))))

================================================================================
SELECT expression with function
================================================================================

SELECT foo(bar, baz) < 10;

--------------------------------------------------------------------------------

(source_file
(query_statement
(query_expr
    (select
    (select_list
        (binary_expression
        (function_call
            (identifier)
            (identifier)
            (identifier))
        (number)))))))

================================================================================
SELECT expression with function without args
================================================================================

SELECT foo();

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select
    (select_list
     (function_call
      (identifier)))))))

================================================================================
SELECT comparison expression boolean
================================================================================

SELECT TRUE AND foo(1) OR FALSE AND NOT a = b.c;

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select
    (select_list
     (binary_expression
      (binary_expression
       (TRUE)
       (function_call
        (identifier)
        (number)))
      (binary_expression
       (FALSE)
       (unary_expression
        (binary_expression
         (identifier)
         (identifier))))))))))


================================================================================
SELECT parenthesized expression
================================================================================

SELECT (TRUE);

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select
    (select_list
     (TRUE))))))

================================================================================
OPERATORS: parenthesized expression 2
================================================================================

SELECT TRUE AND (foo(1) OR FALSE);

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select
    (select_list
     (binary_expression
      (TRUE)
      (binary_expression
       (function_call
        (identifier)
        (number))
       (FALSE))))))))


================================================================================
OPERATORS: IS DISTINCT FROM
================================================================================

SELECT 1 IS DISTINCT FROM NULL;

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select
    (select_list
     (binary_expression
      (number)
      (NULL)))))))


================================================================================
OPERATORS: SELECT element from array
================================================================================

SELECT a[SAFE_OFFSET(0)];

--------------------------------------------------------------------------------

(source_file
 (query_statement
  (query_expr
   (select
    (select_list
     (array_element_access
      (identifier)
      (function_call
       (identifier)
       (number))))))))
